"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[5255],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>b});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=d(n),b=r,s=c["".concat(p,".").concat(b)]||c[b]||m[b]||l;return n?a.createElement(s,o(o({ref:t},u),{},{components:n})):a.createElement(s,o({ref:t},u))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var d=2;d<l;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},712:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_position:6},o="\u8d4b\u503c\u590d\u5408\u8fd0\u7b97\u7b26",i={unversionedId:"embedded-development/basic/linux-c/operators-in-c-language/assignment-compound-operator",id:"embedded-development/basic/linux-c/operators-in-c-language/assignment-compound-operator",title:"\u8d4b\u503c\u590d\u5408\u8fd0\u7b97\u7b26",description:"| \u8fd0\u7b97\u7b26       |\u529f\u80fd\u8bf4\u660e|\u793a\u4f8b|",source:"@site/docs/embedded-development/basic/linux-c/operators-in-c-language/assignment-compound-operator.md",sourceDirName:"embedded-development/basic/linux-c/operators-in-c-language",slug:"/embedded-development/basic/linux-c/operators-in-c-language/assignment-compound-operator",permalink:"/notebook/docs/embedded-development/basic/linux-c/operators-in-c-language/assignment-compound-operator",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"\u4f4d\u8fd0\u7b97\u7b26",permalink:"/notebook/docs/embedded-development/basic/linux-c/operators-in-c-language/bitwise-operators"},next:{title:"\u9017\u53f7\u8fd0\u7b97\u7b26\u548c\u4e09\u76ee\u8fd0\u7b97\u7b26",permalink:"/notebook/docs/embedded-development/basic/linux-c/operators-in-c-language/comma-operator-and-ternary-operator"}},p={},d=[{value:"\u793a\u4f8b\u4ee3\u7801",id:"\u793a\u4f8b\u4ee3\u7801",level:2},{value:"\u8fd0\u884c\u7ed3\u679c",id:"\u8fd0\u884c\u7ed3\u679c",level:3},{value:"\u7ec3\u4e60",id:"\u7ec3\u4e60",level:2},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u8fd0\u884c\u7ed3\u679c",id:"\u8fd0\u884c\u7ed3\u679c-1",level:3}],u={toc:d};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\u8d4b\u503c\u590d\u5408\u8fd0\u7b97\u7b26"},"\u8d4b\u503c\u590d\u5408\u8fd0\u7b97\u7b26"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u8fd0\u7b97\u7b26"),(0,r.kt)("th",{parentName:"tr",align:null},"\u529f\u80fd\u8bf4\u660e"),(0,r.kt)("th",{parentName:"tr",align:null},"\u793a\u4f8b"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"+="),(0,r.kt)("td",{parentName:"tr",align:null},"\u52a0\u6cd5\u8d4b\u503c\u590d\u5408\u8fd0\u7b97\u7b26"),(0,r.kt)("td",{parentName:"tr",align:null},"a+=b \u7b49\u4ef7\u4e8e a = a + b")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-="),(0,r.kt)("td",{parentName:"tr",align:null},"\u51cf\u6cd5\u8d4b\u503c\u590d\u5408\u8fd0\u7b97\u7b26"),(0,r.kt)("td",{parentName:"tr",align:null},"a-=b \u7b49\u4ef7\u4e8e a = a - b")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"*="),(0,r.kt)("td",{parentName:"tr",align:null},"\u4e58\u6cd5\u8d4b\u503c\u590d\u5408\u8fd0\u7b97\u7b26"),(0,r.kt)("td",{parentName:"tr",align:null},"a",(0,r.kt)("em",{parentName:"td"},"=b \u7b49\u4ef7\u4e8e a = a ")," b")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"/="),(0,r.kt)("td",{parentName:"tr",align:null},"\u9664\u6cd5\u8d4b\u503c\u590d\u5408\u8fd0\u7b97\u7b26"),(0,r.kt)("td",{parentName:"tr",align:null},"a/=b \u7b49\u4ef7\u4e8e a = a / b")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"%="),(0,r.kt)("td",{parentName:"tr",align:null},"\u6c42\u4f59\u8d4b\u503c\u590d\u5408\u8fd0\u7b97\u7b26"),(0,r.kt)("td",{parentName:"tr",align:null},"a%=b \u7b49\u4ef7\u4e8e a = a % b")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"&="),(0,r.kt)("td",{parentName:"tr",align:null},"\u4f4d\u4e0e\u8d4b\u503c\u590d\u5408\u8fd0\u7b97\u7b26"),(0,r.kt)("td",{parentName:"tr",align:null},"a&=b \u7b49\u4ef7\u4e8e a = a & b")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"|","="),(0,r.kt)("td",{parentName:"tr",align:null},"\u4f4d\u6216\u8d4b\u503c\u590d\u5408\u8fd0\u7b97\u7b26"),(0,r.kt)("td",{parentName:"tr",align:null},"a","|","=b \u7b49\u4ef7\u4e8e a = a ","|"," b")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"^="),(0,r.kt)("td",{parentName:"tr",align:null},"\u4f4d\u5f02\u6216\u8d4b\u503c\u590d\u5408\u8fd0\u7b97\u7b26"),(0,r.kt)("td",{parentName:"tr",align:null},"a^=b \u7b49\u4ef7\u4e8e a = a ^ b")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},">",">","="),(0,r.kt)("td",{parentName:"tr",align:null},"\u4f4d\u53f3\u79fb\u8d4b\u503c\u590d\u5408\u8fd0\u7b97\u7b26"),(0,r.kt)("td",{parentName:"tr",align:null},"a>>=b \u7b49\u4ef7\u4e8e a = a >> b")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"<","<","="),(0,r.kt)("td",{parentName:"tr",align:null},"\u4f4d\u5de6\u79fb\u8d4b\u503c\u590d\u5408\u8fd0\u7b97\u7b26"),(0,r.kt)("td",{parentName:"tr",align:null},"a<<=b \u7b49\u4ef7\u4e8e a = a << b")))),(0,r.kt)("h2",{id:"\u793a\u4f8b\u4ee3\u7801"},"\u793a\u4f8b\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n\nint main()\n{\n    int a = 20,b = 10;\n\n    \n    a += b; // a = a + b;  ===> a = 30;\n    printf("a = %d\\n",a); //30\n\n    a *= b; //a = a * b; ===> 30 * 10 \n    printf("a = %d\\n",a); //300\n    return 0;\n}\n')),(0,r.kt)("h3",{id:"\u8fd0\u884c\u7ed3\u679c"},"\u8fd0\u884c\u7ed3\u679c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"a = 30\na = 300\n")),(0,r.kt)("h2",{id:"\u7ec3\u4e60"},"\u7ec3\u4e60"),(0,r.kt)("p",null,"\u4ece\u952e\u76d8\u8f93\u5165\u4e24\u4e2a\u6574\u6570\uff0c\u8981\u6c42\u8f93\u51fa+=\uff0c-=\uff0c*=\uff0c/=\u7684\u7ed3\u679c"),(0,r.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n  \nint main()\n{\n    int a = 0, b = 0;\n    printf("\u8bf7\u8f93\u5165\u4e24\u4e2a\u6574\u6570\uff1a");\n    scanf("%d%d", &a, &b);\n    printf("a += b : %d\\n", a += b);\n    printf("a -= b : %d\\n", a -= b);\n    printf("a *= b : %d\\n", a *= b);\n    printf("a /= b : %d\\n", a /= b);\n    return 0;\n}\n')),(0,r.kt)("h3",{id:"\u8fd0\u884c\u7ed3\u679c-1"},"\u8fd0\u884c\u7ed3\u679c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u8bf7\u8f93\u5165\u4e24\u4e2a\u6574\u6570\uff1a10 20\na += b : 30\na -= b : 10\na *= b : 200\na /= b : 10\n")))}m.isMDXComponent=!0}}]);