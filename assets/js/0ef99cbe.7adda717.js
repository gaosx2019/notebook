"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[6553],{3905:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>s});var a=t(7294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function d(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},l=Object.keys(n);for(a=0;a<l.length;a++)t=l[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(a=0;a<l.length;a++)t=l[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var o=a.createContext({}),p=function(n){var e=a.useContext(o),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},c=function(n){var e=p(n.components);return a.createElement(o.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,l=n.originalType,o=n.parentName,c=d(n,["components","mdxType","originalType","parentName"]),m=p(t),s=r,g=m["".concat(o,".").concat(s)]||m[s]||u[s]||l;return t?a.createElement(g,i(i({ref:e},c),{},{components:t})):a.createElement(g,i({ref:e},c))}));function s(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var l=t.length,i=new Array(l);i[0]=m;var d={};for(var o in e)hasOwnProperty.call(e,o)&&(d[o]=e[o]);d.originalType=n,d.mdxType="string"==typeof n?n:r,i[1]=d;for(var p=2;p<l;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7784:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const l={sidebar_position:5},i="\u4f4d\u8fd0\u7b97\u7b26",d={unversionedId:"embedded-development/basic/linux-c/operators-in-c-language/bitwise-operators",id:"embedded-development/basic/linux-c/operators-in-c-language/bitwise-operators",title:"\u4f4d\u8fd0\u7b97\u7b26",description:"\u7b80\u4ecb",source:"@site/docs/embedded-development/basic/linux-c/operators-in-c-language/bitwise-operators.md",sourceDirName:"embedded-development/basic/linux-c/operators-in-c-language",slug:"/embedded-development/basic/linux-c/operators-in-c-language/bitwise-operators",permalink:"/notebook/docs/embedded-development/basic/linux-c/operators-in-c-language/bitwise-operators",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"\u903b\u8f91\u8fd0\u7b97\u7b26",permalink:"/notebook/docs/embedded-development/basic/linux-c/operators-in-c-language/logical-operator"},next:{title:"\u8d4b\u503c\u590d\u5408\u8fd0\u7b97\u7b26",permalink:"/notebook/docs/embedded-development/basic/linux-c/operators-in-c-language/assignment-compound-operator"}},o={},p=[{value:"\u7b80\u4ecb",id:"\u7b80\u4ecb",level:2},{value:"\u793a\u4f8b\u4ee3\u78011",id:"\u793a\u4f8b\u4ee3\u78011",level:2},{value:"\u8fd0\u884c\u7ed3\u679c",id:"\u8fd0\u884c\u7ed3\u679c",level:3},{value:"\u793a\u4f8b\u4ee3\u78012",id:"\u793a\u4f8b\u4ee3\u78012",level:2},{value:"\u8fd0\u884c\u7ed3\u679c",id:"\u8fd0\u884c\u7ed3\u679c-1",level:3},{value:"\u793a\u4f8b\u4ee3\u78013",id:"\u793a\u4f8b\u4ee3\u78013",level:2},{value:"\u8fd0\u884c\u7ed3\u679c",id:"\u8fd0\u884c\u7ed3\u679c-2",level:3},{value:"\u7ec3\u4e60",id:"\u7ec3\u4e60",level:2},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u8f93\u51fa",id:"\u8f93\u51fa",level:3}],c={toc:p};function u(n){let{components:e,...t}=n;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\u4f4d\u8fd0\u7b97\u7b26"},"\u4f4d\u8fd0\u7b97\u7b26"),(0,r.kt)("h2",{id:"\u7b80\u4ecb"},"\u7b80\u4ecb"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u8fd0\u7b97\u7b26"),(0,r.kt)("th",{parentName:"tr",align:null},"\u683c\u5f0f"),(0,r.kt)("th",{parentName:"tr",align:null},"\u529f\u80fd"),(0,r.kt)("th",{parentName:"tr",align:null},"\u7ed3\u679c"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"&"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8868\u8fbe\u5f0f1 & \u8868\u8fbe\u5f0f2"),(0,r.kt)("td",{parentName:"tr",align:null},"\u6309\u4f4d\u4e0e"),(0,r.kt)("td",{parentName:"tr",align:null},"1 \u6309\u4f4d\u4e0e1 \u7ed3\u679c\u662f1 1 \u6309\u4f4d\u4e0e0 \u7ed3\u679c\u662f0 0\u6309\u4f4d\u4e0e0 \u7ed3\u679c\u662f0 \u901f\u8bb0\uff1a\u90fd1\u52191\uff0c1\u96f6\u52190")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"|"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8868\u8fbe\u5f0f1 ","|"," \u8868\u8fbe\u5f0f2"),(0,r.kt)("td",{parentName:"tr",align:null},"\u6309\u4f4d\u6216"),(0,r.kt)("td",{parentName:"tr",align:null},"1 \u6309\u4f4d\u62160 \u7ed3\u679c\u662f1 1 \u6309\u4f4d\u62161 \u7ed3\u679c\u662f1 0\u6309\u4f4d\u62160 \u7ed3\u679c\u662f0 \u901f\u8bb0\uff1a\u4e001\u52191\uff0c\u90fd0\u52190")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"^"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8868\u8fbe\u5f0f1 ^ \u8868\u8fbe\u5f0f2"),(0,r.kt)("td",{parentName:"tr",align:null},"\u6309\u4f4d\u5f02\u6216"),(0,r.kt)("td",{parentName:"tr",align:null},"\u76f8\u540c\u4e3a0\uff0c\u4e0d\u540c\u4e3a1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"~"),(0,r.kt)("td",{parentName:"tr",align:null},"~\u8868\u8fbe\u5f0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u6309\u4f4d\u53d6\u53cd"),(0,r.kt)("td",{parentName:"tr",align:null},"1 \u53d8\u62100, 0\u53d8\u62101")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"<<"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8868\u8fbe\u5f0f<<\u4f4d\u6570"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5de6\u79fb"),(0,r.kt)("td",{parentName:"tr",align:null},"\u65e0\u8bba\u662f\u6b63\u6570\u8fd8\u662f\u8d1f\u6570\uff0c\u5de6\u79fb\u90fd\u662f\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u4f4d\u5411\u5de6\u79fb\u52a8\u9ad8\u4f4d\u4e22\u5f03\uff0c\u4f4e\u4f4d\u88650 \u5de6\u79fb\u7684\u65f6\u5019\uff0c\u7b49\u4ef7\u4e8e\u5c06\u8fd9\u4e2a\u6570\u636e\u4e58\u4ee52\u7684n\uff08\u79fb\u52a8\u7684\u4f4d\uff09\u6b21\u65b9")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},">",">"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8868\u8fbe\u5f0f",">",">","\u4f4d\u6570"),(0,r.kt)("td",{parentName:"tr",align:null},"\u53f3\u79fb"),(0,r.kt)("td",{parentName:"tr",align:null},"\u903b\u8f91\u53f3\u79fb(\u9488\u5bf9\u65e0\u7b26\u53f7\u6570\u636e) \u5bf9\u5e94\u7684\u662f\u6b63\u6570\u548c0\uff0c\u903b\u8f91\u53f3\u79fb\u662f\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u4f4d\u5411\u53f3\u79fb\u52a8\uff0c\u4f4e\u4f4d\u4e22\u5f03\uff0c\u9ad8\u4f4d\u88650\u3002 \u7b97\u672f\u53f3\u79fb(\u9488\u5bf9\u6709\u7b26\u53f7\u6570\u636e): \u82e5\u662f\u6570\u636e\u4e3a\u6b63\u6570\uff0c\u7b97\u672f\u53f3\u79fb\u662f\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u4f4d\u5411\u53f3\u79fb\u52a8\uff0c\u4f4e\u4f4d\u4e22\u5f03\uff0c\u9ad8\u4f4d\u88650\u3002 \u82e5\u662f\u6570\u636e\u4e3a\u8d1f\u6570\uff0c\u7b97\u672f\u53f3\u79fb\u662f\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u4f4d\u5411\u53f3\u79fb\u52a8\uff0c\u4f4e\u4f4d\u4e22\u5f03\uff0c\u9ad8\u4f4d\u88651\u3002 \u901f\u8bb0\uff1a \u53f3\u79fb\uff0c\u5411\u53f3\u79fb\u52a8\uff0c\u4f4e\u4f4d\u4e22\u5f03\uff0c\u9ad8\u4f4d\u6b63\u6570\u88650\uff0c\u8d1f\u6570\u88651")))),(0,r.kt)("h2",{id:"\u793a\u4f8b\u4ee3\u78011"},"\u793a\u4f8b\u4ee3\u78011"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n\nint main()\n{\n        unsigned char reg1 = 0x13;\n//        char reg2 = -1;  //\u539f: 1000 0001 \n                         //\u53cd: 1111 1110 \n                                         //\u8865: 1111 1111\n        unsigned char reg2 = 0x78;\n        unsigned char data = 0;\n\n        // 0001 0011 \n        //&1111 1111 \n        // 0001 0011 ===>0x13\n\n\n        //  0001 0011\n        //& 0111 1000\n        //  0001 0000 ===>0x10\n        data = reg1 & reg2;\n        printf("data = %#x\\n",data); //0x10\n\n\n        //  0001 0011\n        //| 0111 1000\n        //  0111 1011 ===>0x7b\n        data = reg1 | reg2;\n        printf("data = %#x\\n",data); //0x7b\n\n        // 0001 0011\n        //~\n        // 1110 1100 ===>0xec\n\n        data = ~reg1;\n        printf("data = %#x\\n",data); //0xec\n        //  0001 0011\n        //^ 0111 1000\n    //  0110 1011 ====>0x6b\n        data = reg1 ^ reg2;\n        printf("data = %#x\\n",data); //0x6b\n\n        return 0;\n}\n')),(0,r.kt)("h3",{id:"\u8fd0\u884c\u7ed3\u679c"},"\u8fd0\u884c\u7ed3\u679c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"data = 0x10\ndata = 0x7b\ndata = 0xec\ndata = 0x6b\n")),(0,r.kt)("h2",{id:"\u793a\u4f8b\u4ee3\u78012"},"\u793a\u4f8b\u4ee3\u78012"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n\nint main()\n{\n        unsigned char  a = 10,b = 15;\n\n        unsigned char  t = 0;\n \n        printf("a = %d b = %d\\n",a,b);\n\n        //2.\u4e0d\u7528\u7b2c\u4e09\u65b9\u53d8\u91cf\uff0c\u4ea4\u6362a\u548cb\u7684\u503c\u3002       \n        a = a ^ b;\n        b = a ^ b;  //b = (a ^ b) ^ b ===> b = a;\n        a = a ^ b;  //a = (a ^ b) ^ a ===> a = b;\n        \n        printf("a = %d b = %d\\n",a,b);\n        return 0;\n}\n')),(0,r.kt)("h3",{id:"\u8fd0\u884c\u7ed3\u679c-1"},"\u8fd0\u884c\u7ed3\u679c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"a = 10 b = 15\na = 15 b = 10\n")),(0,r.kt)("h2",{id:"\u793a\u4f8b\u4ee3\u78013"},"\u793a\u4f8b\u4ee3\u78013"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n\nint main()\n{\n        unsigned char reg = 3; //0000 0011\n        char a = -3; //\u539f\u7801: 1000 0011\n                     //\u53cd\u7801: 1111 1100\n                                 //\u8865\u7801: 1111 1101\n        \n        //  0000 0011\n        //<<3\n        //  0001 1000 ===>24\n        \n        reg = reg << 3;\n        printf("reg = %d\\n",reg); //24\n        \n        \n        //    1111 1101\n        //<<3\n        //  \u8865:  1110 1000,a\u5728\u5185\u5b58\u4e2d\u7684\u8865\u7801,%d\u8981\u8f93\u51fa\u4e3a\u539f\u7801,a\u4e3achar\n        //  ~ :  1001 0111\n        // +1 :  1001 1000 ==>-(0001 1000)\n        \n        \n        a = a << 3;\n        printf("a = %d\\n",a); //-24\n        \n        //\u8865\u7801\uff1a1110 1000 ,\u6700\u9ad8\u4f4d\u4e3a1\uff0c\u8868\u793a\u8d1f\u6570,\u8d1f\u6570\u53f3\u79fb\u88651\n        //>>6 \n        //\u8865\u7801\uff1a1111 1111\n        //\u53d6\u53cd\uff1a1000 0000\n        //+1  :1000 0001 ===>-1  \n        a = a >> 6;\n        printf("a = %d\\n",a); //-1;\n\n        return 0;\n}\n')),(0,r.kt)("h3",{id:"\u8fd0\u884c\u7ed3\u679c-2"},"\u8fd0\u884c\u7ed3\u679c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"reg = 24\na = -24\na = -1\n")),(0,r.kt)("h2",{id:"\u7ec3\u4e60"},"\u7ec3\u4e60"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"unsigned char a = 0x58;\nunsigned char b = 0xd7;\nunsigned char c = 0;\n\n \u8981\u6c42\u8f93\u51fa\u4e0b\u5217c\u7684\u503c\u3002\n c = a & b\n c = a | b\n c = (a & ~b) ^ 0xf1\n\u8981\u6c42\u5148\u7b14\u7b97\uff0c\u7136\u540e\u4e66\u5199\u4ee3\u7801\u9a8c\u8bc1\u3002\n")),(0,r.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n  \nint main()\n{\n    unsigned char a = 0x58;\n    unsigned char b = 0xd7;\n    unsigned char c = 0;\n\n    //   0101 1000\n    // & 1101 0111\n    //   0101 0000\n    //   2**4 + 2**6 = 80\n    c = a & b;\n    printf("%d ", c); // 80\n    //   0101 1000\n    // | 1101 0111\n    //   1101 1111\n    //   2**7+2**6+2**4+2**3+2**2+2**1+2**0=223\n    c = a | b;\n    printf("%d ", c); // 223\n    // ~ 1101 0111\n    //   0010 1000\n    // & 0101 1000\n    //   0000 1000\n    // ^ 1111 0001\n    //   1111 1001\n    //   2**7+2**6+2**5+2**4+2**3+2**0=249\n    c = (a & ~b) ^ 0xf1;\n    printf("%d \\n", c); // 249\n    return 0;\n}\n')),(0,r.kt)("h3",{id:"\u8f93\u51fa"},"\u8f93\u51fa"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"80 223 249\n")))}u.isMDXComponent=!0}}]);