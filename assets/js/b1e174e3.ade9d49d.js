"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[4928],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=l(n),y=i,g=f["".concat(c,".").concat(y)]||f[y]||u[y]||o;return n?r.createElement(g,a(a({ref:t},p),{},{components:n})):r.createElement(g,a({ref:t},p))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8046:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:2},a="Generic types",s={unversionedId:"a-tour-of-go/generics/generics/generic-types",id:"a-tour-of-go/generics/generics/generic-types",title:"Generic types",description:"In addition to generic functions, Go also supports generic types. A type can be parameterized with a type parameter, which could be useful for implementing generic data structures.",source:"@site/docs/a-tour-of-go/generics/generics/generic-types.md",sourceDirName:"a-tour-of-go/generics/generics",slug:"/a-tour-of-go/generics/generics/generic-types",permalink:"/notebook/docs/a-tour-of-go/generics/generics/generic-types",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Type parameters",permalink:"/notebook/docs/a-tour-of-go/generics/generics/type-parameters"},next:{title:"\u5e76\u53d1",permalink:"/notebook/docs/category/\u5e76\u53d1"}},c={},l=[],p={toc:l};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"generic-types"},"Generic types"),(0,i.kt)("p",null,"In addition to generic functions, Go also supports generic types. A type can be parameterized with a type parameter, which could be useful for implementing generic data structures."),(0,i.kt)("p",null,"This example demonstrates a simple type declaration for a singly-linked list holding any type of value."),(0,i.kt)("p",null,"As an exercise, add some functionality to this list implementation."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"list.go")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport "fmt"\n\n// List represents a singly-linked list that holds\n// values of any type.\ntype List[T any] struct {\n    next *List[T]\n    val  T\n}\n\nfunc (list *List[int]) insertHeadLinklist(val int) {\n    node := List[int]{val: val}\n    node.next = list.next\n    list.next = &node\n}\n\nfunc (list *List[int]) printfDataLinklist() {\n    p := list\n    for p.next != nil {\n        fmt.Println(p.next.val)\n        p = p.next\n    }\n}\n\nfunc main() {\n    myList := List[int]{val: 0}\n    for i := 1; i <= 10; i++ {\n        myList.insertHeadLinklist(i)\n    }\n    myList.printfDataLinklist()\n}\n')),(0,i.kt)("p",null,"\u8f93\u51fa\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n")))}u.isMDXComponent=!0}}]);