"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[1949],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>b});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),d=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=d(e.components);return r.createElement(c.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(t),b=a,f=u["".concat(c,".").concat(b)]||u[b]||s[b]||o;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var d=2;d<o;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9145:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:2},i="\u81ea\u589e\u548c\u81ea\u51cf\u8fd0\u7b97\u7b26",l={unversionedId:"embedded-development/basic/linux-c/operators-in-c-language/self-increasing-and-self-decreasing-operators",id:"embedded-development/basic/linux-c/operators-in-c-language/self-increasing-and-self-decreasing-operators",title:"\u81ea\u589e\u548c\u81ea\u51cf\u8fd0\u7b97\u7b26",description:"\u793a\u4f8b\u7528\u6cd5",source:"@site/docs/embedded-development/basic/linux-c/operators-in-c-language/self-increasing-and-self-decreasing-operators.md",sourceDirName:"embedded-development/basic/linux-c/operators-in-c-language",slug:"/embedded-development/basic/linux-c/operators-in-c-language/self-increasing-and-self-decreasing-operators",permalink:"/notebook/docs/embedded-development/basic/linux-c/operators-in-c-language/self-increasing-and-self-decreasing-operators",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"\u7b97\u6570\u8fd0\u7b97\u7b26",permalink:"/notebook/docs/embedded-development/basic/linux-c/operators-in-c-language/arithmetic-operator"},next:{title:"\u5173\u7cfb\u8fd0\u7b97\u7b26",permalink:"/notebook/docs/embedded-development/basic/linux-c/operators-in-c-language/relational-operators"}},c={},d=[{value:"\u793a\u4f8b\u7528\u6cd5",id:"\u793a\u4f8b\u7528\u6cd5",level:2},{value:"\u793a\u4f8b\u4ee3\u7801",id:"\u793a\u4f8b\u4ee3\u7801",level:2},{value:"\u8fd0\u884c\u7ed3\u679c",id:"\u8fd0\u884c\u7ed3\u679c",level:3},{value:"\u7ec3\u4e60",id:"\u7ec3\u4e60",level:2},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u8f93\u51fa",id:"\u8f93\u51fa",level:3}],p={toc:d};function s(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u81ea\u589e\u548c\u81ea\u51cf\u8fd0\u7b97\u7b26"},"\u81ea\u589e\u548c\u81ea\u51cf\u8fd0\u7b97\u7b26"),(0,a.kt)("h2",{id:"\u793a\u4f8b\u7528\u6cd5"},"\u793a\u4f8b\u7528\u6cd5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"int a = 100; \nint b = 0; \n\nb = ++a; //a = a + 1,b = a;\nb = --a; //a = a - 1,b = a;\n\u89c4\u5219: \u524d\u7f6e++,\u5148\u505a\u52a0\u6cd5\u8fd0\u7b97\uff0c\u5728\u8d4b\u503c\n\nb = a++; //b = a, a = a + 1; \nb = a--; //b = a, a = a - 1\n\u89c4\u5219: \u540e\u7f6e++ ,\u5148\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\uff0c\u5728++\n")),(0,a.kt)("h2",{id:"\u793a\u4f8b\u4ee3\u7801"},"\u793a\u4f8b\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'//05-add.c\n#include <stdio.h>\n\nint main()\n{\n    int a = 10,b = 0;\n\n    b = a ++;//b = a;a = a + 1;\n    printf("a = %d b = %d\\n",a,b); //11,10\n\n    b = ++a; //a = a + 1 b = a;\n    printf("a = %d b = %d\\n",a,b);//12,12\n\n    return 0;\n}\n')),(0,a.kt)("h3",{id:"\u8fd0\u884c\u7ed3\u679c"},"\u8fd0\u884c\u7ed3\u679c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"a = 11 b = 10\na = 12 b = 12\n")),(0,a.kt)("h2",{id:"\u7ec3\u4e60"},"\u7ec3\u4e60"),(0,a.kt)("p",null,"\u6c42\u51fa\u4e0b\u5217\u6570\u636e\u7684\u7b54\u6848\u3002(\u4e0a\u4e00\u4e2a\u8868\u8fbe\u5f0fx\uff0cy\u7684\u503c\u4f1a\u5f71\u54cd\u4e0b\u9762x\u548cy\u7684\u503c)"),(0,a.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n\nint main()\n{\n        int x = 10 ,y =20;\n        int z = 0;\n\n        z = (++x) + (y++);\n        // x = x + 1 = 11; z = x + y = 11 + 20 = 31; y = y + 1 = 21\n        printf("z = %d\\n",z); // z = 31\n\n        z = (--x) + (y++);\n        // x = x - 1 = 11 - 1 = 10; z = x + y = 10 + 21 = 31; y = y + 1 = 22\n        printf("z = %d\\n",z); // z = 31\n\n        z= (++x) + (--y);\n        // x = x + 1 = 11; y = y - 1 = 21; z = x + y = 11 + 21 = 32\n        printf("z = %d\\n",z); // z = 32\n\n        printf("x = %d y = %d\\n",x,y); // x = 11 y = 21\n        return 0;\n}\n')),(0,a.kt)("h3",{id:"\u8f93\u51fa"},"\u8f93\u51fa"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"z = 31\nz = 31\nz = 32\nx = 11 y = 21\n")))}s.isMDXComponent=!0}}]);