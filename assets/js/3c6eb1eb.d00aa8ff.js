"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[435],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),f=c(n),m=o,d=f["".concat(p,".").concat(m)]||f[m]||u[m]||a;return n?r.createElement(d,i(i({ref:t},l),{},{components:n})):r.createElement(d,i({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5313:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:1},i="Type parameters",s={unversionedId:"a-tour-of-go/generics/generics/type-parameters",id:"a-tour-of-go/generics/generics/type-parameters",title:"Type parameters",description:"Go functions can be written to work on multiple types using type parameters. The type parameters of a function appear between brackets, before the function's arguments.",source:"@site/docs/a-tour-of-go/generics/generics/type-parameters.md",sourceDirName:"a-tour-of-go/generics/generics",slug:"/a-tour-of-go/generics/generics/type-parameters",permalink:"/notebook/docs/a-tour-of-go/generics/generics/type-parameters",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"\u901a\u7528",permalink:"/notebook/docs/category/\u901a\u7528-1"},next:{title:"Generic types",permalink:"/notebook/docs/a-tour-of-go/generics/generics/generic-types"}},p={},c=[],l={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"type-parameters"},"Type parameters"),(0,o.kt)("p",null,"Go functions can be written to work on multiple types using type parameters. The type parameters of a function appear between brackets, before the function's arguments."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func Index[T comparable](s []T, x T) int\n")),(0,o.kt)("p",null,"This declaration means that ",(0,o.kt)("inlineCode",{parentName:"p"},"s")," is a slice of any type ",(0,o.kt)("inlineCode",{parentName:"p"},"T")," that fulfills the built-in constraint ",(0,o.kt)("inlineCode",{parentName:"p"},"comparable"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"x")," is also a value of the same type."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"comparable")," is a useful constraint that makes it possible to use the == and != operators on values of the type. In this example, we use it to compare a value to all slice elements until a match is found. This ",(0,o.kt)("inlineCode",{parentName:"p"},"Index")," function works for any type that supports comparison."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"index.go")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport "fmt"\n\n// Index returns the index of x in s, or -1 if not found.\nfunc Index[T comparable](s []T, x T) int {\n    for i, v := range s {\n        // v and x are type T, which has the comparable\n        // constraint, so we can use == here.\n        if v == x {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc main() {\n    // Index works on a slice of ints\n    si := []int{10, 20, 15, -10}\n    fmt.Println(Index(si, 15))\n\n    // Index also works on a slice of strings\n    ss := []string{"foo", "bar", "baz"}\n    fmt.Println(Index(ss, "hello"))\n}\n')),(0,o.kt)("p",null,"\u8f93\u51fa\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"2\n-1\n")))}u.isMDXComponent=!0}}]);