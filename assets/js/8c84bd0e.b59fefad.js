"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4337],{3905:(n,e,t)=>{t.d(e,{Zo:()=>s,kt:()=>k});var i=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function r(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function d(n,e){if(null==n)return{};var t,i,a=function(n,e){if(null==n)return{};var t,i,a={},l=Object.keys(n);for(i=0;i<l.length;i++)t=l[i],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(i=0;i<l.length;i++)t=l[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var o=i.createContext({}),p=function(n){var e=i.useContext(o),t=e;return n&&(t="function"==typeof n?n(e):r(r({},e),n)),t},s=function(n){var e=p(n.components);return i.createElement(o.Provider,{value:e},n.children)},c={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},_=i.forwardRef((function(n,e){var t=n.components,a=n.mdxType,l=n.originalType,o=n.parentName,s=d(n,["components","mdxType","originalType","parentName"]),_=p(t),k=a,u=_["".concat(o,".").concat(k)]||_[k]||c[k]||l;return t?i.createElement(u,r(r({ref:e},s),{},{components:t})):i.createElement(u,r({ref:e},s))}));function k(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var l=t.length,r=new Array(l);r[0]=_;var d={};for(var o in e)hasOwnProperty.call(e,o)&&(d[o]=e[o]);d.originalType=n,d.mdxType="string"==typeof n?n:a,r[1]=d;for(var p=2;p<l;p++)r[p]=t[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}_.displayName="MDXCreateElement"},8973:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var i=t(7462),a=(t(7294),t(3905));const l={sidebar_position:6},r="1-7 \u7ec3\u4e60\u5408\u96c6",d={unversionedId:"imooc-embedded-engineer/step02/week07/time_space_complexity/chapter01/1-7",id:"imooc-embedded-engineer/step02/week07/time_space_complexity/chapter01/1-7",title:"1-7 \u7ec3\u4e60\u5408\u96c6",description:"\u7ec3\u4e60\u96c6\u5408",source:"@site/docs/imooc-embedded-engineer/step02/week07/time_space_complexity/chapter01/1-7.md",sourceDirName:"imooc-embedded-engineer/step02/week07/time_space_complexity/chapter01",slug:"/imooc-embedded-engineer/step02/week07/time_space_complexity/chapter01/1-7",permalink:"/my-website/docs/imooc-embedded-engineer/step02/week07/time_space_complexity/chapter01/1-7",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"1-6 \u8868\u8fbe\u5f0f\u6c42\u503c\u5347\u7ea7\u7248",permalink:"/my-website/docs/imooc-embedded-engineer/step02/week07/time_space_complexity/chapter01/1-6"},next:{title:"Go\u8bed\u8a00\u4e4b\u65c5",permalink:"/my-website/docs/category/go\u8bed\u8a00\u4e4b\u65c5"}},o={},p=[{value:"\u7ec3\u4e60\u96c6\u5408",id:"\u7ec3\u4e60\u96c6\u5408",level:2},{value:"\u7ec3\u4e601\uff1a",id:"\u7ec3\u4e601",level:3},{value:"\u7ec3\u4e602\uff1a",id:"\u7ec3\u4e602",level:3},{value:"\u7ec3\u4e603 \u3010\u67d0\u5e74\u5927\u516c\u53f8\u7b14\u8bd5\u9898\u3011\uff1a",id:"\u7ec3\u4e603-\u67d0\u5e74\u5927\u516c\u53f8\u7b14\u8bd5\u9898",level:3},{value:"\u7ec3\u4e604\uff1a",id:"\u7ec3\u4e604",level:3}],s={toc:p};function c(n){let{components:e,...l}=n;return(0,a.kt)("wrapper",(0,i.Z)({},s,l,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"1-7-\u7ec3\u4e60\u5408\u96c6"},"1-7 \u7ec3\u4e60\u5408\u96c6"),(0,a.kt)("h2",{id:"\u7ec3\u4e60\u96c6\u5408"},"\u7ec3\u4e60\u96c6\u5408"),(0,a.kt)("h3",{id:"\u7ec3\u4e601"},"\u7ec3\u4e601\uff1a"),(0,a.kt)("p",null,"\u5927\u5bb6\u81ea\u5df1\u5199\u4ee3\u7801\u5b9e\u73b0\u6c42\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u3002"),(0,a.kt)("p",null,"bi_tree.c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'//\n// Created by gaosx on 22-9-2.\n//\n#include "bi_tree.h"\n\nbi_tree_t *create_binary_tree(int n) {\n    bi_tree_t *root = NULL;\n\n    root = (bi_tree_t *) malloc(sizeof(bi_tree_t));\n    if (NULL == root) {\n        printf("malloc failed!\\n");\n        return NULL;\n    }\n    memset(root, 0, sizeof(bi_tree_t));\n\n    root->n = n;\n\n    printf("Input %d node data: ", n);\n    scanf("%c", &(root->data));\n\n    // \u6e05\u9664\u7f13\u51b2\u533a\u6570\u636e\n    while (getchar() != \'\\n\');\n\n    // \u5de6\u5b69\u5b50\u5b58\u5728\u6761\u4ef6\n    if (2 * n <= N) {\n        root->l_child = create_binary_tree(2 * n);\n    }\n\n    // \u53f3\u5b69\u5b50\u5b58\u5728\u6761\u4ef6\n    if (2 * n + 1 <= N) {\n        root->r_child = create_binary_tree(2 * n + 1);\n    }\n\n    return root;\n}\n\n// \u6c42\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\nint get_binary_tree_depth(bi_tree_t *root) {\n    if (root == NULL) {\n        return 0;\n    }\n    int left = get_binary_tree_depth(root->l_child);\n    int right = get_binary_tree_depth(root->r_child);\n\n    return left >= right ? left + 1 : right + 1;\n}\n')),(0,a.kt)("p",null,"bi_tree.h"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"//\n// Created by gaosx on 22-9-2.\n//\n\n#ifndef EMBEDDED_BI_TREE_H\n#define EMBEDDED_BI_TREE_H\n\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n\n#define N 6\n\ntypedef char data_t;\n\ntypedef struct bi_tree {\n    int n; // \u4fdd\u5b58\u7f16\u53f7\n    data_t data; // \u4fdd\u5b58\u5b57\u7b26\n    struct bi_tree *l_child; // \u4fdd\u5b58\u5de6\u5b69\u5b50\u7684\u5730\u5740\n    struct bi_tree *r_child; // \u4fdd\u5b58\u53f3\u5b69\u5b50\u7684\u5730\u5740\n} bi_tree_t;\n\nextern bi_tree_t *create_binary_tree(int n);\n\nextern int get_binary_tree_depth(bi_tree_t *root);\n\n#endif //EMBEDDED_BI_TREE_H\n")),(0,a.kt)("p",null,"main.c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'//\n// Created by gaosx on 22-9-2.\n//\n#include "bi_tree.h"\n\nint main() {\n    bi_tree_t *root;\n\n    root = create_binary_tree(1);\n\n    printf("create is successfully!\\n");\n    printf("\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e3a:%d", get_binary_tree_depth(root));\n    return 0;\n}\n')),(0,a.kt)("p",null,"\u8f93\u51fa\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input 1 node data: A\nInput 2 node data: B\nInput 4 node data: D\nInput 5 node data: E\nInput 3 node data: C\nInput 6 node data: F\ncreate is successfully!\n\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e3a:3\n")),(0,a.kt)("h3",{id:"\u7ec3\u4e602"},"\u7ec3\u4e602\uff1a"),(0,a.kt)("p",null,"\u5728\u5355\u5411\u94fe\u8868\u4e2d\u5b9e\u73b0\u5192\u6ce1\u6392\u5e8f\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void sort_linklist(linknode_t *head)\n{\n\n}\n")),(0,a.kt)("p",null,"linklist.c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'//\n// Created by gaosx on 22-8-31.\n//\n#include "linklist.h"\n\n// \u521b\u5efa\u7a7a\u7684\u94fe\u8868---\u4e3a\u5934\u7ed3\u70b9\u5728\u5806\u533a\u5206\u914d\u7a7a\u95f4\nlinklist_t *create_empty_linklist() {\n    linklist_t *head = NULL;\n\n    // 1.1 \u5206\u914d\u5806\u533a\u7a7a\u95f4\n    head = (linklist_t *) malloc(sizeof(linklist_t));\n    if (NULL == head) {\n        printf("malloc failed!\\n");\n        return NULL;\n    }\n\n    memset(head, 0, sizeof(linklist_t));\n    // head->next = NULL;\n    // head->data = 0;\n    return head;\n}\n\n// \u5c3e\u63d2\u6cd5\n// \u7279\u70b9\uff1a\u63d2\u5165\u7684\u987a\u5e8f\u548c\u8f93\u51fa\u7684\u987a\u5e8f\u662f\u76f8\u540c\u7684\nvoid insert_tail_linklist(linklist_t *head, datatype_t data) {\n    // 3.1 \u4e3a\u7ed3\u70b9\u5728\u5806\u533a\u7533\u8bf7\u7a7a\u95f4\n    linklist_t *temp = (linklist_t *) malloc(sizeof(linklist_t));\n    if (NULL == temp) {\n        printf("malloc failed!\\n");\n    }\n\n    // 3.2 \u63d2\u5165\u6570\u636e\n    temp->data = data;\n\n    // 3.3 \u627e\u5230\u5c3e\u7ed3\u70b9\n    linklist_t *tail = head;\n    while (tail->next != NULL) {\n        tail = tail->next;\n    }\n\n    // 3.4 \u8fde\u63a5\u7ed3\u70b9\n    temp->next = tail->next;\n    tail->next = temp;\n}\n\n// \u8f93\u51fa\u94fe\u8868\u4e2d\u7684\u5185\u5bb9\nvoid print_data_linklist(linklist_t *head) {\n    linklist_t *p = head;\n\n    while (p->next != NULL) {\n        printf("%d ", p->next->data);\n        p = p->next;\n    }\n    printf("\\n");\n}\n\n// \u5728\u5355\u5411\u94fe\u8868\u4e2d\u5b9e\u73b0\u5192\u6ce1\u6392\u5e8f\nvoid sort_linklist(linklist_t *head) {\n    linklist_t *p = NULL;\n    linklist_t *q = NULL;\n    linklist_t *tail = NULL;\n\n    while (head->next != tail) {\n        p = head;\n        while (p->next != tail && p->next->next != tail) {\n            if (p->next->data > p->next->next->data) {\n                q = p->next;\n                p->next = p->next->next;\n                q->next = p->next->next;\n                p->next->next = q;\n                q = NULL;\n            }\n            p = p->next;\n        }\n        tail = p->next;\n    }\n}\n')),(0,a.kt)("p",null,"linklist.h"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"//\n// Created by gaosx on 22-8-31.\n//\n\n#ifndef EMBEDDED_LINKLIST_H\n#define EMBEDDED_LINKLIST_H\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef int datatype_t;\n\ntypedef struct node {\n    datatype_t data; // \u6570\u636e\u57df\uff1a\u4fdd\u5b58\u6709\u6548\u6570\u636e\n    struct node *next; // \u6307\u9488\u57df\uff1a\u4fdd\u5b58\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684\u5730\u5740\n} linklist_t;\n\nextern linklist_t *create_empty_linklist();\n\nextern void insert_tail_linklist(linklist_t *head, datatype_t data);\n\nextern void print_data_linklist(linklist_t *head);\n\nextern void sort_linklist(linklist_t *head);\n\n#endif //EMBEDDED_LINKLIST_H\n")),(0,a.kt)("p",null,"main.c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'//\n// Created by gaosx on 22-8-31.\n//\n\n#include "linklist.h"\n\nint main() {\n    linklist_t *head = NULL;\n    head = create_empty_linklist();\n\n    datatype_t data;\n    int n = 0, i = 0;\n\n    printf("please input data number you want to insert: ");\n    scanf("%d", &n);\n\n    printf("please input %d data: ", n);\n\n    for (i = 0; i < n; i++) {\n        scanf("%d", &data);\n        insert_tail_linklist(head, data);\n    }\n\n    print_data_linklist(head);\n\n    sort_linklist(head);\n\n    print_data_linklist(head);\n    return 0;\n}\n')),(0,a.kt)("p",null,"\u8f93\u51fa\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"please input data number you want to insert: 5\nplease input 5 data: 50 40 30 20 10\n50 40 30 20 10 \n10 20 30 40 50 \n")),(0,a.kt)("h3",{id:"\u7ec3\u4e603-\u67d0\u5e74\u5927\u516c\u53f8\u7b14\u8bd5\u9898"},"\u7ec3\u4e603 \u3010\u67d0\u5e74\u5927\u516c\u53f8\u7b14\u8bd5\u9898\u3011\uff1a"),(0,a.kt)("p",null,"\u5c06\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u5408\u6210\u4e00\u4e2a\u6709\u5e8f\u94fe\u8868\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"//head1 : 1 3 5 7 9\n//head2 : 2 4 6 8 10\n//\u8981\u6c42\u5408\u6210\u4e00\u4e2a\u94fe\u8868\uff0chead\u4e3a\u4e0a\u9762\u4e2d\u7684\u67d0\u4e00\u4e2a\u3002\u65b0\u7684\u94fe\u8868\u4e3a:1 2 3 4 5 6 7 8 9 10\nlinknode_t *and_linklist(linknode_t *head1,linknode_t *head2)\n{\n\n}\n")),(0,a.kt)("p",null,"linklist.h"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"//\n// Created by gaosx on 22-8-31.\n//\n\n#ifndef EMBEDDED_LINKLIST_H\n#define EMBEDDED_LINKLIST_H\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef int datatype_t;\n\ntypedef struct node {\n    datatype_t data; // \u6570\u636e\u57df\uff1a\u4fdd\u5b58\u6709\u6548\u6570\u636e\n    struct node *next; // \u6307\u9488\u57df\uff1a\u4fdd\u5b58\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684\u5730\u5740\n} linklist_t;\n\nextern linklist_t *create_empty_linklist();\n\nextern void print_data_linklist(linklist_t *head);\n\nextern void insert_order_linklist(linklist_t *head, datatype_t data);\n\nextern linklist_t *and_linklist(linklist_t *head1, linklist_t *head2);\n\nextern void init_linklist(linklist_t *head, char *name);\n\n#endif //EMBEDDED_LINKLIST_H\n")),(0,a.kt)("p",null,"linklist.c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'//\n// Created by gaosx on 22-8-31.\n//\n#include "linklist.h"\n\n// 1. \u521b\u5efa\u7a7a\u7684\u94fe\u8868---\u4e3a\u5934\u7ed3\u70b9\u5728\u5806\u533a\u5206\u914d\u7a7a\u95f4\nlinklist_t *create_empty_linklist() {\n    linklist_t *head = NULL;\n\n    // 1.1 \u5206\u914d\u5806\u533a\u7a7a\u95f4\n    head = (linklist_t *) malloc(sizeof(linklist_t));\n    if (NULL == head) {\n        printf("malloc failed!\\n");\n        return NULL;\n    }\n\n    memset(head, 0, sizeof(linklist_t));\n    // head->next = NULL;\n    // head->data = 0;\n    return head;\n}\n\n// \u6709\u5e8f\u63d2\u5165\n// \u7279\u70b9\uff1a\nvoid insert_order_linklist(linklist_t *head, datatype_t data) {\n    // 4.1 \u4e3a\u7ed3\u70b9\u5728\u5806\u533a\u7533\u8bf7\u7a7a\u95f4\n    linklist_t *temp = (linklist_t *) malloc(sizeof(linklist_t));\n    if (NULL == temp) {\n        printf("malloc failed!\\n");\n    }\n\n    // 3.2 \u63d2\u5165\u6570\u636e\n    temp->data = data;\n\n    linklist_t *p = head;\n\n    // 3.3 p\u6307\u9488\u5411\u540e\u904d\u5386\n    while (p->next != NULL && data > p->next->data) {\n        p = p->next;\n    }\n\n    // 3.4 \u5728p\u8282\u70b9\u540e\u63d2\u5165temp\u8282\u70b9\n    temp->next = p->next;\n    p->next = temp;\n}\n\n// \u8f93\u51fa\u94fe\u8868\u4e2d\u7684\u5185\u5bb9\nvoid print_data_linklist(linklist_t *head) {\n    linklist_t *p = head;\n\n    while (p->next != NULL) {\n        printf("%d ", p->next->data);\n        p = p->next;\n    }\n    printf("\\n");\n}\n\n// \u5c06\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u5408\u6210\u4e00\u4e2a\u6709\u5e8f\u94fe\u8868\nlinklist_t *and_linklist(linklist_t *head1, linklist_t *head2) {\n    linklist_t *p = NULL;\n\n    p = head2;\n    while (p->next != NULL) {\n        insert_order_linklist(head1, p->next->data);\n        p = p->next;\n    }\n    return head1;\n}\n\n// \u521d\u59cb\u5316\u94fe\u8868\nvoid init_linklist(linklist_t *head, char *name) {\n    int data = 0;\n    while (1) {\n        printf("\u8bf7\u8f93\u5165%s\u94fe\u8868\u4e2d\u9700\u8981\u5305\u542b\u7684\u5143\u7d20:", name);\n        scanf("%d", &data);\n        printf("received:%d\\n", data);\n        insert_order_linklist(head, data);\n        //\u6e05\u9664\u7f13\u51b2\u533a\u6570\u636e\n        while(getchar() != \'\\n\');\n        printf("\u662f\u5426\u7ee7\u7eed(y/n):");\n        if (getchar() == \'n\') {\n            break;\n        }\n    }\n}\n')),(0,a.kt)("p",null,"main.c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'//\n// Created by gaosx on 22-8-31.\n//\n\n#include "linklist.h"\n\nint main() {\n    // \u521b\u5efa\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868root1\u548croot2\n    linklist_t *root1 = create_empty_linklist();\n    linklist_t *root2 = create_empty_linklist();\n    init_linklist(root1, "root1");\n    init_linklist(root2, "root2");\n\n    printf("root1:");\n    print_data_linklist(root1);\n\n    printf("root2:");\n    print_data_linklist(root2);\n\n    // \u5c06\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u5408\u6210\u4e00\u4e2a\u6709\u5e8f\u94fe\u8868\n    root1 = and_linklist(root1, root2);\n    printf("root1:");\n    print_data_linklist(root1);\n    return 0;\n}\n')),(0,a.kt)("p",null,"\u8f93\u51fa\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u8bf7\u8f93\u5165root1\u94fe\u8868\u4e2d\u9700\u8981\u5305\u542b\u7684\u5143\u7d20:1\nreceived:1\n\u662f\u5426\u7ee7\u7eed(y/n):y\n\u8bf7\u8f93\u5165root1\u94fe\u8868\u4e2d\u9700\u8981\u5305\u542b\u7684\u5143\u7d20:3\nreceived:3\n\u662f\u5426\u7ee7\u7eed(y/n):y\n\u8bf7\u8f93\u5165root1\u94fe\u8868\u4e2d\u9700\u8981\u5305\u542b\u7684\u5143\u7d20:5\nreceived:5\n\u662f\u5426\u7ee7\u7eed(y/n):y\n\u8bf7\u8f93\u5165root1\u94fe\u8868\u4e2d\u9700\u8981\u5305\u542b\u7684\u5143\u7d20:7\nreceived:7\n\u662f\u5426\u7ee7\u7eed(y/n):y\n\u8bf7\u8f93\u5165root1\u94fe\u8868\u4e2d\u9700\u8981\u5305\u542b\u7684\u5143\u7d20:9\nreceived:9\n\u662f\u5426\u7ee7\u7eed(y/n):n\n\u8bf7\u8f93\u5165root2\u94fe\u8868\u4e2d\u9700\u8981\u5305\u542b\u7684\u5143\u7d20:2\nreceived:2\n\u662f\u5426\u7ee7\u7eed(y/n):y\n\u8bf7\u8f93\u5165root2\u94fe\u8868\u4e2d\u9700\u8981\u5305\u542b\u7684\u5143\u7d20:4\nreceived:4\n\u662f\u5426\u7ee7\u7eed(y/n):y\n\u8bf7\u8f93\u5165root2\u94fe\u8868\u4e2d\u9700\u8981\u5305\u542b\u7684\u5143\u7d20:6\nreceived:6\n\u662f\u5426\u7ee7\u7eed(y/n):y\n\u8bf7\u8f93\u5165root2\u94fe\u8868\u4e2d\u9700\u8981\u5305\u542b\u7684\u5143\u7d20:8\nreceived:8\n\u662f\u5426\u7ee7\u7eed(y/n):y\n\u8bf7\u8f93\u5165root2\u94fe\u8868\u4e2d\u9700\u8981\u5305\u542b\u7684\u5143\u7d20:10\nreceived:10\n\u662f\u5426\u7ee7\u7eed(y/n):n\nroot1:1 3 5 7 9 \nroot2:2 4 6 8 10 \nroot1:1 2 3 4 5 6 7 8 9 10 \n")),(0,a.kt)("h3",{id:"\u7ec3\u4e604"},"\u7ec3\u4e604\uff1a"),(0,a.kt)("p",null,"\u5df2\u7ecf\u77e5\u9053\u4e00\u68f5\u4e8c\u53c9\u6811\u3002"),(0,a.kt)("p",null,"\u5148\u5e8f\u904d\u5386\uff1aABDGHCEIF"),(0,a.kt)("p",null,"\u4e2d\u5e8f\u904d\u5386\uff1aGDHBAEICF"),(0,a.kt)("p",null,"\u8981\u6c42\u5927\u5bb6\u753b\u51fa\u8fd9\u9897\u4e8c\u53c9\u6811\u3002"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"1-7-01.png",src:t(1173).Z,width:"578",height:"539"})))}c.isMDXComponent=!0},1173:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/1-7-01-fbb62018ee202e7aa77f36df7300c5dd.png"}}]);